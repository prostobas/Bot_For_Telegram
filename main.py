import random
import re
import telebot as tb
from telebot import types
import sqlite3
import time

from datetime import datetime
#6230965819:AAEItt6Nd6GvV5Wo9gGI2c1A_UZsQOWrxm8 —Ç–µ—Å—Ç
#6222870229:AAFPDHeKkEEvyrm6JZiItlhIOU4pvIEeHzc –±–æ—Ç
bot = tb.TeleBot('6230965819:AAEItt6Nd6GvV5Wo9gGI2c1A_UZsQOWrxm8')

nik = ''
uspol= ''
age = 0
note = ''
class BUTTON():
    def __init__(self):
        self.KEYBB = types.KeyboardButton
        self.KEYBM = types.ReplyKeyboardMarkup(resize_keyboard=True)
        self.KEYBR = types.ReplyKeyboardRemove()

    def but(self, btn1, btn2, btn3, btn4):
        markup = self.KEYBM
        btn_1 = self.KEYBB(btn1)
        btn_2 = self.KEYBB(btn2)
        btn_3 = self.KEYBB(btn3)
        btn_4 = self.KEYBB(btn4)
        markup.row(btn_1, btn_2)
        markup.row(btn_3)
        markup.row(btn_4)
        return markup

    def pol_but(self, btn1, btn2):
        markup = self.KEYBM
        btn_1 = self.KEYBB(btn1)
        btn_2 = self.KEYBB(btn2)
        markup.row(btn_1, btn_2)
        return markup

    def delete_but(self):
        return self.KEYBR

BUT = BUTTON().but('–ú–æ—è –∞–Ω–∫–µ—Ç–∞', '–ü–æ–º–æ—â—å', '–°–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø–∏—Å–∏', '–ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å')
EDITBUT = BUTTON().but('–ù–∏–∫', '–ü–æ–ª', '–í–æ–∑—Ä–∞—Å—Ç', '–ü–æ–∂–µ–ª–∞–Ω–∏–µ')
POLBUT = BUTTON().pol_but('–ú—É–∂—Å–∫–æ–π', '–ñ–µ–Ω—Å–∫–∏–π')
DELETEBUT = BUTTON().delete_but()



class HELP:
    def __init__(self, text):
        self.text = text

    def help(self, mes):
        bot.send_message(mes.chat.id, self.text)

class RECORDING():
    def __init__(self):
        self.ARRAY = []
        self.smail_m = [ "üòä", "üë¶", "üòâ", "üòé", "üí™", "üò©", "üë±", "üòõ", "üôâ"]
        self.smail_d = ["‚ù§", "üåπ", "üë©", "üíã", "üôå", "üò©", "‚ÄçÔ∏èüë±‚Äç‚ôÄÔ∏è", "üíú", "üß°", "üíï", "ü•∞", "üòò", "üòô"]

    def array(self, len_us, us, id):
        l = len_us
        u = us
        i = id
        y = random.randrange(0, l)
        if y not in self.ARRAY: #and us[y][0] != id:
            self.ARRAY.append(y)
            return y
        elif len(self.ARRAY) == l:
            self.ARRAY.clear()
            return self.array(l, u, i)
        else:
            return self.array(l, u, i)

    def record(self, mes):
        conn = sqlite3.connect('baza.sql')
        cur = conn.cursor()
        cur.execute('SELECT * FROM users')
        users = cur.fetchall()
        y = self.array(len(users), users, mes.from_user.id)
        if users[y][2].lower() == '–º—É–∂—Å–∫–æ–π':
            text = '–º—É–∂—á–∏–Ω–∞'
            x = random.choice(self.smail_m)
        else:
            text = '–¥–µ–≤—É—à–∫–∞'
            x = random.choice(self.smail_d)
        info = f'{x} –ê–≤—Ç–æ—Ä {text}:  {users[y][1]} \n' \
               f'üìå –í–æ–∑—Ä–∞—Å—Ç: {users[y][3]}\n\n' \
               f'‚úç <b>–ü–∏—Å—å–º–æ –∏–∑ –ø—Ä–æ—à–ª–æ–≥–æ: </b><i>{users[y][4]}</i>'

        cur.close()
        conn.close()
        bot.send_message(mes.chat.id, info, parse_mode='html')

class EDIT():
    def wish(self, mes):
        mes_txt = mes.text.lower()
        if mes_txt == "–Ω–∏–∫":
            bot.send_message(mes.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–∏–∫–Ω–µ–π–º: üëá', reply_markup=DELETEBUT)
            bot.register_next_step_handler(mes, self.wish_nik)
        elif mes_txt == "–ø–æ–ª":
            bot.send_message(mes.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π –ø–æ–ª: üëá', reply_markup=POLBUT)
            bot.register_next_step_handler(mes, self.wish_pol)
        elif mes_txt == "–≤–æ–∑—Ä–∞—Å—Ç":
            bot.send_message(mes.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≤–æ–∑—Ä–∞—Å—Ç: üëá', reply_markup=DELETEBUT)
            bot.register_next_step_handler(mes, self.wish_age)
        else:
            bot.send_message(mes.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –ø–æ–∂–µ–ª–∞–Ω–∏–µ: üëá', reply_markup=DELETEBUT)
            bot.register_next_step_handler(mes, self.wish_notes)

    def wish_nik(self, mes):
        conn = sqlite3.connect('baza.sql')
        cur = conn.cursor()
        nik = mes.text.strip()
        regex = "^[a-zA-Z–∞-—è–ê-–Ø–µ–Å,.?/!0123456789]+$"
        pattern = re.compile(regex)
        pat = pattern.search(nik) is not None
        if pat == True and len(nik) <= 15:
            data = (nik, mes.from_user.id)
            cur.execute("UPDATE users set nik = ? where id = ?", data)
            conn.commit()
            cur.close()
            conn.close()
            time.sleep(0.5)
            bot.send_message(mes.chat.id, '–í–∞—à–∞ –∑–∞–ø–∏—Å—å –∏–∑–º–µ–Ω–∏–Ω–∞!', reply_markup=BUT)
        elif pat == False or ' ' in nik:
            bot.send_message(mes.chat.id,
                             '–í–∞—à –Ω–∏–∫ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã! ü§® –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π! ')
            bot.register_next_step_handler(mes, self.wish_nik)
        elif len(nik) > 15:
            bot.send_message(mes.chat.id, '–î–ª–∏–Ω–∞ –Ω–∏–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ 15 —Å–∏–º–≤–æ–ª–æ–≤! üôÑ –ü—Ä–∏–¥—É–º–∞–π –¥—Ä—É–≥–æ–π! ')
            bot.register_next_step_handler(mes, self.wish_nik)
        else:
            bot.send_message(mes.chat.id, '–≠—ç—ç—Ö—Ö—Ö –∂–∞–ª—å, –Ω–æ —Ç–∞–∫–æ–π –Ω–∏–∫ —É–∂–µ –µ—Å—Ç—å! üôÇ  –ù–∞–ø–∏—à–∏ –¥—Ä—É–≥–æ–π!')
            bot.register_next_step_handler(mes, self.wish_nik)


    def wish_pol(self, mes):
        uspol = mes.text.strip()
        if uspol.lower() == '–º—É–∂—Å–∫–æ–π' or uspol.lower() == '–∂–µ–Ω—Å–∫–∏–π':
            conn = sqlite3.connect('baza.sql')
            cur = conn.cursor()
            data = (uspol, mes.from_user.id)
            cur.execute("UPDATE users set pol = ? where id = ?", data)
            conn.commit()
            cur.close()
            conn.close()
            time.sleep(0.5)
            bot.send_message(mes.chat.id, '–í–∞—à–∞ –∑–∞–ø–∏—Å—å –∏–∑–º–µ–Ω–∏–Ω–∞!', reply_markup=BUT)
        else:
            bot.send_message(mes.chat.id, '–ù–µ–µ–µ, –Ω—É —Ç–∞–∫ –¥–µ–ª–æ –Ω–µ –ø–æ–π–¥–µ—Ç, –ø–∏—à–∏ –ø—Ä–∞–≤–¥—É! üòÑ')
            bot.register_next_step_handler(mes, self.wish_pol)


    def wish_age(self, mes):
        age = mes.text.strip()
        try:
            age = int(age)
            if age > 0 and age <= 100:
                conn = sqlite3.connect('baza.sql')
                cur = conn.cursor()
                age = mes.text.strip()
                data = (age, mes.from_user.id)
                cur.execute("UPDATE users set age = ? where id = ?", data)
                conn.commit()
                cur.close()
                conn.close()
                time.sleep(0.5)
                bot.send_message(mes.chat.id, '–í–∞—à–∞ –∑–∞–ø–∏—Å—å –∏–∑–º–µ–Ω–∏–Ω–∞!', reply_markup=BUT)
            else:
                bot.send_message(mes.chat.id, f'–î—Ä—É–≥, –ª—é–¥–∏ –±–æ–ª—å—à–µ {age} –ª–µ—Ç –Ω–µ –∂–∏–≤—É—Ç! üòÇ')
                bot.send_message(mes.chat.id, f'–ù–∞–ø–∏—à–∏ —Ç–æ—á–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç:')
                bot.register_next_step_handler(mes, self.wish_age)
        except ValueError:
            bot.send_message(mes.chat.id, '–ó–∞—á–µ–º —Ç—ã –º–µ–Ω—è –ø—ã—Ç–∞–µ—à—å—Å—è –æ–±–º–∞–Ω—É—Ç—å, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ ‚ùó‚ùó‚ùó')
            bot.register_next_step_handler(mes, self.wish_age)

    def wish_notes(self, mes):
        note = mes.text.strip()
        if len(note) > 80:
            bot.send_message(mes.chat.id, '–î—Ä—É–≥, —Ç–≤–æ—ë –ø–æ–∂–µ–ª–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, –Ω–∞–ø–∏—à–∏ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–ø—Ä–æ—â–µ )')
            bot.register_next_step_handler(mes, self.wish_notes)
        else:
            conn = sqlite3.connect('baza.sql')
            cur = conn.cursor()
            data = (note, mes.from_user.id)
            cur.execute("UPDATE users set notes = ? where id = ?", data)
            conn.commit()
            cur.close()
            conn.close()
            time.sleep(0.5)
            bot.send_message(mes.chat.id, '–í–∞—à–∞ –∑–∞–ø–∏—Å—å –∏–∑–º–µ–Ω–∏–Ω–∞!', reply_markup=BUT)


class TELEGRAMBOT: # –æ–±—ä—è–≤–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–ª–∞—Å—Å
    def __init__(self, id, BUT, EDITBUT, POLBUT, DELETEBUT):
        print("–°–æ–∑–¥–∞–Ω –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞!")
        self._USER_ID = id
        self._COMMANDS = ['–ü—Ä–∏–≤–µ—Ç!', '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π!','–•–∞–π!']
        self._BUT = BUT
        self._EDITBUT = EDITBUT
        self._POLBUT = POLBUT
        self._DELETEBUT = DELETEBUT

    def examination(self, id):
        conn = sqlite3.connect('baza.sql')
        cur = conn.cursor()
        cur.execute('CREATE TABLE IF NOT EXISTS users '
                    '(id int auto_increment primary key,'
                    'nik varchar(25), '
                    'pol varchar(10), '
                    'age int,'
                    'city varchar(80)'
                    'notes varchar(80))')

        conn.commit()
        cur.close()
        conn.close()

        conn = sqlite3.connect('baza.sql')
        cur = conn.cursor()
        cur.execute('SELECT * FROM users')
        users = cur.fetchall()
        ans = None
        for el in users:
            if id == el[0]:
                ans = 'yes'
                break
            else:
                ans = 'no'
        cur.close()
        conn.close()
        return ans

    def communicat(self, message):
        answer = self.examination(self._USER_ID)
        mes_txt = message.text.lower()
        if mes_txt == "–Ω–∞—á–∞—Ç—å":
            if answer == 'no' or answer == None:
                self.lounding(message)
            else:
                bot.send_message(message.chat.id, f' {random.choice(self._COMMANDS)} {message.from_user.first_name}', reply_markup=self._BUT)
        elif mes_txt == '–º–æ—è –∞–Ω–∫–µ—Ç–∞':
            anketa = ANKETA().ank(message)
        elif mes_txt == '–ø–æ–º–æ—â—å':
            help = HELP(f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä–∞–∑–¥–µ–ª "–ü–æ–º–æ—â—å"‚ùó –≠—Ç–æ –±–æ—Ç "–ü–∏—Å–µ–º" –æ—Ç —Å–æ–∑–¥–∞—Ç–µ–ª—è PROSTOBAS - @prost0bas.' \
               f'\n\n ‚öô –î–∞–Ω–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±—ã–ª–æ —Å–æ–∑–¥–∞–Ω–æ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –≤—ã –º–æ–≥–ª–∏ –ø–∏—Å–∞—Ç—å —Ä–∞–∑–Ω—ã–µ –ø–∏—Å—å–º–∞ –¥—Ä—É–≥–∏–º –ª—é–¥—è–º, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–µ –∏ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ. ü•∞' \
               f'' \
               f'\n\nü§ñ –í–µ—Ä—Å–∏—è –±–æ—Ç–∞ V1.0').help(message)
        elif mes_txt == '—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø–∏—Å–∏':
            recording = RECORDING().record(message)
        elif mes_txt == '–∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å':
            time.sleep(0.5)
            bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Å–Ω–∏–∑—É —Ä–∞–∑–¥–µ–ª –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å',
                             reply_markup=self._EDITBUT)
            edit = EDIT()
            bot.register_next_step_handler(message,  edit.wish)
        else:
            bot.send_message(message.chat.id, '–Ø —Ç–µ–±—è —á—Ç–æ-—Ç–æ –Ω–µ –ø–æ–Ω–∏–º–∞—é ü§®')

    # –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É –∏–ª–∏ –Ω–∞–ø–∏—Å–∞–ª —á—Ç–æ-—Ç–æ
    def lounding(self, message):
        # –í—ã–∑—ã–≤–∞–µ–º –∫–ª–∞—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ñ—É–Ω–∫—Ü–∏–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        answer = self.examination(self._USER_ID)
        if answer == 'no' or answer == None:
            bot.send_message(message.chat.id, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ "–ü–∏—Å—å–º–æ –∏–∑ –ø—Ä–æ—à–ª–æ–≥–æ". –ú–µ–Ω—è –∑–æ–≤—É—Ç –ú–∞–∫—Å–∏–º –∏ —è —è–≤–ª—è—é—Å—å –µ–≥–æ –æ—Å–Ω–æ–≤–∞—Ç–µ–ª–µ–º! '
                                              '–í —á–µ–º —Å—É—Ç—å —ç—Ç–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –í—ã –ø–æ–π–º–µ—Ç–µ –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –ø—Ä–æ–π–¥–µ—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é. –ñ–µ–ª–∞—é —É—Å–ø–µ—Ö–æ–≤ –∏ —Ö–æ—Ä–æ—à–µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è!'
                                              ''
                                              '–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ –∞–Ω–æ–Ω–∏–º–Ω–æ–µ –∏–º—è  ')
            bot.register_next_step_handler(message, self.user_name)
        else:
            bot.send_message(message.chat.id, '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ‚ùó', reply_markup=self._BUT)

    def user_name(self, message):
        global nik
        nik = message.text.strip()
        conn = sqlite3.connect('baza.sql')
        cur = conn.cursor()
        cur.execute('SELECT * FROM users')
        users = cur.fetchall()
        ans = None
        for el in users:
            if nik == el[1]:
                ans = 'yes'
            else:
                ans = 'no'
        cur.close()
        conn.close()
        regex = "^[a-zA-Z–∞-—è–ê-–Ø–µ–Å,.\|?/!0123456789]+$"
        pattern = re.compile(regex)
        pat = pattern.search(nik) is not None
        if ans == 'no' or ans == None and pat == True and len(nik) <= 15:
            bot.send_message(message.chat.id, f'–û—Ç–ª–∏—á–Ω–æ‚ùó'
                                              f'\n‚úÖ–¢–µ–ø–µ—Ä—å –≤–∞—Å –∑–æ–≤—É—Ç: {nik}. '
                                              f'\n–ò–¥–µ–º –¥–∞–ª—å—à–µ üö∂‚Äç‚ôÇÔ∏è '
                                              f'\n\n–í–≤–µ–¥–∏—Ç–µ –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π –ø–æ–ª: üëá', reply_markup=self._POLBUT)
            bot.register_next_step_handler(message, self.user_pol)
        elif pat == False or ' ' in nik:
            bot.send_message(message.chat.id,
                             '–í–∞—à –Ω–∏–∫ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã! ü§® –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π! ')
            bot.register_next_step_handler(message, self.user_name)
        elif len(nik) > 15:
            bot.send_message(message.chat.id, '–î–ª–∏–Ω–∞ –Ω–∏–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ 15 —Å–∏–º–≤–æ–ª–æ–≤! üôÑ –ü—Ä–∏–¥—É–º–∞–π –¥—Ä—É–≥–æ–π! ')
            bot.register_next_step_handler(message, self.user_name)
        else:
            bot.send_message(message.chat.id, '–≠—ç—ç—Ö—Ö—Ö –∂–∞–ª—å, –Ω–æ —Ç–∞–∫–æ–π –Ω–∏–∫ —É–∂–µ –µ—Å—Ç—å! üôÇ  –ù–∞–ø–∏—à–∏ –¥—Ä—É–≥–æ–π!')
            bot.register_next_step_handler(message, self.user_name)

    def user_pol(self, message):
        global uspol
        uspol = message.text.strip()
        if uspol.lower() == '–º—É–∂—Å–∫–æ–π' or uspol.lower() == '–∂–µ–Ω—Å–∫–∏–π':
            bot.send_message(message.chat.id, f'–°—É–ø–µ—Ä ‚ò∫. –û—Å—Ç–∞–ª–æ—Å—å –µ—â–µ —á—É—Ç—å-—á—É—Ç—å. '
                                              f'\n‚úÖ –í–∞—Å –∑–æ–≤—É—Ç: {nik}. '
                                              f'\n‚úÖ –í–∞—à –ø–æ–ª: {uspol}.'
                                              f'\n\n–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç:üëá', reply_markup=self._DELETEBUT)
            bot.register_next_step_handler(message, self.user_age)
        else:
            bot.send_message(message.chat.id, '–ù–µ–µ–µ, –Ω—É —Ç–∞–∫ –¥–µ–ª–æ –Ω–µ –ø–æ–π–¥–µ—Ç, –ø–∏—à–∏ –ø—Ä–∞–≤–¥—É! üòÑ')
            bot.register_next_step_handler(message, self.user_pol)

    def user_age(self, message):
        global age
        age = message.text.strip()
        try:
            age = int(age)
            if age > 0 and age <= 100:
                bot.send_message(message.chat.id, f'–£—Ä–∞–∞–∞–∞ ‚ò∫. –ü–æ—Å–ª–µ–¥–Ω–∏–π —ç—Ç–∞–ø. '
                                              f'\n‚úÖ –í–∞—Å –∑–æ–≤—É—Ç: {nik}. '
                                              f'\n‚úÖ –í–∞—à –ø–æ–ª: {uspol}.'
                                              f'\n‚úÖ –í–∞—à –≤–æ–∑—Ä–∞—Å—Ç: {age}.'
                                              f'\n\n–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ—ë –ø–∏—Å—å–º–æ –¥—Ä—É–≥–∏–º –ª—é–¥—è–º: ü§ó')
                bot.register_next_step_handler(message, self.user_note)
            else:
                bot.send_message(message.chat.id, f'–î—Ä—É–≥, –ª—é–¥–∏ –±–æ–ª—å—à–µ {age} –ª–µ—Ç –Ω–µ –∂–∏–≤—É—Ç! üòÇ')
                bot.send_message(message.chat.id, f'–ù–∞–ø–∏—à–∏ —Ç–æ—á–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç:')
                bot.register_next_step_handler(message, self.user_age)
        except ValueError:
            bot.send_message(message.chat.id, '–ó–∞—á–µ–º —Ç—ã –º–µ–Ω—è –ø—ã—Ç–∞–µ—à—å—Å—è –æ–±–º–∞–Ω—É—Ç—å, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ ‚ùó‚ùó‚ùó')
            bot.register_next_step_handler(message, self.user_age)

    def user_note(self, message):
        note = message.text.strip()
        conn = sqlite3.connect('baza.sql')
        cur = conn.cursor()
        cur.execute(
            "INSERT INTO users (id, nik, pol, age, notes) VALUES (('%d'), ('%s'), ('%s'), ('%d'), ('%s'))" % (
                self._USER_ID, nik, uspol, age, note))
        conn.commit()
        cur.close()
        conn.close()
        time.sleep(0.)
        if len(note) > 80:
            bot.send_message(message.chat.id, '–î—Ä—É–≥, —Ç–≤–æ—ë –ø–∏—Å—å–º–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, –Ω–∞–ø–∏—à–∏ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–ø—Ä–æ—â–µ )')
            bot.register_next_step_handler(message, self.user_note)
        else:
            bot.send_message(message.chat.id, f'–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –≤—ã –ø—Ä–æ—à–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —É—Å–ø–µ—à–Ω–∞‚ùó '
                                              f'\n‚úÖ –í–∞—Å –∑–æ–≤—É—Ç: {nik}. '
                                              f'\n‚úÖ –í–∞—à –ø–æ–ª: {uspol}.'
                                              f'\n‚úÖ –í–∞—à –≤–æ–∑—Ä–∞—Å—Ç: {age}.'
                                              f'\n‚úÖ –í–∞—à–µ –ø–æ–∂–µ–ª–∞–Ω–∏–µ: {note}.'
                                              f'\n\n üí° –¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏. '
                                              f' –°–Ω–∏–∑—É –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –∫–Ω–æ–ø–∫–∏,'
                                              f'–Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü–æ–º–æ—â—å", —á—Ç–æ–±—ã —è –º–æ–≥ –≤–≤–µ—Å—Ç–∏ –≤–∞—Å –≤ –∫—É—Ä—Å –¥–µ–ª–∞ üôÇ', reply_markup=self._BUT)



@bot.message_handler(commands=['start'])
def start(message):
    BOT = TELEGRAMBOT(message.from_user.id, BUT, EDITBUT, POLBUT, DELETEBUT)
    BOT.lounding(message)

@bot.message_handler()
def callback(message):
    BOT = TELEGRAMBOT(message.from_user.id, BUT, EDITBUT, POLBUT ,DELETEBUT)
    BOT.communicat(message)


print('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!')
while True:
    if __name__ == '__main__':
        try:
            bot.polling(none_stop=True, interval=0)
        except Exception:
            pass
